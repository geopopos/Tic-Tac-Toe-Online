import pygame, math
from pygame.locals import *

w = 480
h = 480

def drawX(self, screen, boardPos):
    #draw a x at the board position
    pygame.draw.lines(self.screen, (20, 20, 20), False, [(10, (h/3)), (w, (h/3))])
    
    
def drawY(self, screen, boardPos):
    #draw a y at the board position
    print("drawing y")

class Game():
    def __init__(self):
        self.running = True
        self.winner = None
        self.turn = 0
    
class Board():
    def __init__(self, screen):
        self.screen = screen
        self.boardArray = [" " for x in range(9)]
        self.tileSize = ((w/3 - 20), (h/3 - 20))
        self.boardPositions = []
        for i in range(9):
            self.boardPositions.append((int((i%3) * (w/3)), int(math.floor(i/3) * (h/3))))
        print(self.boardPositions[0][0])
            
    def display(self):
        #draw function for board background, outline, and X\O sprites
        pygame.draw.lines(self.screen, (20, 20, 20), False, [(0, (h/3)), (w, (h/3))])
        pygame.draw.lines(self.screen, (20, 20, 20), False, [(0, ((h/3)*2)), (w, ((h/3)*2))])
        pygame.draw.lines(self.screen, (20, 20, 20), False, [((w/3), 0), ((w/3), h)])
        pygame.draw.lines(self.screen, (20, 20, 20), False, [((w/3)*2, 0), ((w/3)*2, h)])        
        for i in range(9):
            pygame.draw.rect(self.screen, (255, 0, 0), (0, 0, self.tileSize[0], self.tileSize[1]));#(self.boardPositions[i][0], self.boardPositions[i][1], self.tileSize[0], self.tileSize[1]), -1);
            
def processInput():
    #process player input
    #loop over input events
    for event in pygame.event.get():
        #Check if player has pressed escape key if so quit the game
        if event.type == pygame.QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
            game.running = False
        elif event.type == pygame.MOUSEBUTTONUP:
            print(pygame.mouse.get_pos())
            
def update():
    #update variables
    print("Update") 


def render():
    #render graphics
    screen.fill((240, 240, 240))
    board.display()
    pygame.display.update()
    
if __name__ == "__main__":
    pygame.init()
    game = Game()

    screen = pygame.display.set_mode((w, h))
    
    board = Board(screen)

    while game.running:
        processInput()
#        update()
        render()
        board.display()


    pygame.quit()
